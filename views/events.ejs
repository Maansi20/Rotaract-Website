<%- include('partials/header') %>

<!-- Events Hero Section -->
<section class="hero-section bg-gradient-primary text-white" style="margin-top: 76px;">
    <div class="container">
        <div class="row align-items-center min-vh-50">
            <div class="col-lg-8 mx-auto text-center">
                <h1 class="display-4 fw-bold mb-4">Our Events</h1>
                <p class="lead mb-4">
                    Discover upcoming events, community service projects, and opportunities to make a difference.
                    Join us in creating positive change in our community and beyond.
                </p>
            </div>
        </div>
    </div>
</section>

<!-- Event Filters -->
<section class="py-4 bg-light">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-lg-6">
                <div class="d-flex flex-wrap gap-2">
                    <button class="btn btn-rotaract active" data-filter="all">All Events</button>
                    <button class="btn btn-outline-rotaract" data-filter="community-service">Community Service</button>
                    <button class="btn btn-outline-rotaract" data-filter="fundraising">Fundraising</button>
                    <button class="btn btn-outline-rotaract" data-filter="social">Social</button>
                    <button class="btn btn-outline-rotaract" data-filter="professional">Professional</button>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="d-flex justify-content-lg-end mt-3 mt-lg-0">
                    <div class="input-group" style="max-width: 300px;">
                        <input type="text" class="form-control" placeholder="Search events..." id="eventSearch">
                        <button class="btn btn-outline-secondary" type="button">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Events Grid -->
<section class="py-5">
    <div class="container">
        <div id="eventsContainer" class="row g-4">
            <!-- Events will be loaded here dynamically -->
            <div class="col-12 text-center">
                <div class="spinner-border text-rotaract-blue" role="status">
                    <span class="visually-hidden">Loading events...</span>
                </div>
                <p class="mt-3 text-muted">Loading events...</p>
            </div>
        </div>
        
        <!-- No events message (hidden by default) -->
        <div id="noEventsMessage" class="text-center py-5" style="display: none;">
            <i class="fas fa-calendar-times fa-4x text-muted mb-4"></i>
            <h4 class="text-muted">No events found</h4>
            <p class="text-muted">Check back later for upcoming events or adjust your search criteria.</p>
        </div>
    </div>
</section>

<!-- Event Modal -->
<div class="modal fade" id="eventModal" tabindex="-1" aria-labelledby="eventModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="eventModalLabel">Event Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="eventModalBody">
                <!-- Event details will be loaded here -->
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    let allEvents = [];
    let filteredEvents = [];
    
    // Load events
    loadEvents();
    
    // Filter buttons
    document.querySelectorAll('[data-filter]').forEach(button => {
        button.addEventListener('click', function() {
            // Update active button
            document.querySelectorAll('[data-filter]').forEach(btn => btn.classList.remove('active'));
            document.querySelectorAll('[data-filter]').forEach(btn => btn.classList.add('btn-outline-rotaract'));
            document.querySelectorAll('[data-filter]').forEach(btn => btn.classList.remove('btn-rotaract'));
            
            this.classList.add('active');
            this.classList.remove('btn-outline-rotaract');
            this.classList.add('btn-rotaract');
            
            // Filter events
            const filter = this.dataset.filter;
            filterEvents(filter);
        });
    });
    
    // Search functionality
    document.getElementById('eventSearch').addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        searchEvents(searchTerm);
    });
    
    async function loadEvents() {
        try {
            const response = await fetch('/api/events');
            const data = await response.json();
            
            if (data.success) {
                allEvents = data.events;
                filteredEvents = [...allEvents];
                displayEvents(filteredEvents);
            } else {
                showNoEventsMessage();
            }
        } catch (error) {
            console.error('Error loading events:', error);
            showNoEventsMessage();
        }
    }
    
    function filterEvents(category) {
        if (category === 'all') {
            filteredEvents = [...allEvents];
        } else {
            filteredEvents = allEvents.filter(event => event.category === category);
        }
        displayEvents(filteredEvents);
    }
    
    function searchEvents(searchTerm) {
        if (!searchTerm) {
            displayEvents(filteredEvents);
            return;
        }
        
        const searchResults = filteredEvents.filter(event => 
            event.title.toLowerCase().includes(searchTerm) ||
            event.description.toLowerCase().includes(searchTerm) ||
            event.location.toLowerCase().includes(searchTerm)
        );
        
        displayEvents(searchResults);
    }
    
    function displayEvents(events) {
        const container = document.getElementById('eventsContainer');
        const noEventsMessage = document.getElementById('noEventsMessage');
        
        if (events.length === 0) {
            container.style.display = 'none';
            noEventsMessage.style.display = 'block';
            return;
        }
        
        container.style.display = 'flex';
        noEventsMessage.style.display = 'none';
        
        container.innerHTML = events.map(event => createEventCard(event)).join('');
        
        // Add click handlers for event cards
        container.querySelectorAll('.event-card').forEach(card => {
            card.addEventListener('click', function() {
                const eventId = this.dataset.eventId;
                showEventDetails(eventId);
            });
        });
    }
    
    function createEventCard(event) {
        const eventDate = new Date(event.date);
        const isUpcoming = eventDate > new Date();
        const statusBadge = isUpcoming ? 
            '<span class="badge bg-success">Upcoming</span>' : 
            '<span class="badge bg-secondary">Past</span>';
        
        const categoryColors = {
            'community-service': 'primary',
            'fundraising': 'success',
            'social': 'info',
            'professional': 'warning'
        };
        
        const categoryColor = categoryColors[event.category] || 'secondary';
        
        return `
            <div class="col-lg-4 col-md-6">
                <div class="card border-0 shadow-sm event-card h-100" data-event-id="${event._id}" style="cursor: pointer;">
                    <img src="${event.image || '/images/event-placeholder.jpg'}" class="card-img-top" alt="${event.title}" style="height: 200px; object-fit: cover;">
                    <div class="card-body d-flex flex-column">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span class="badge bg-${categoryColor}">${event.category.replace('-', ' ').toUpperCase()}</span>
                            ${statusBadge}
                        </div>
                        <h5 class="card-title">${event.title}</h5>
                        <p class="card-text text-muted flex-grow-1">${event.description.substring(0, 100)}...</p>
                        <div class="mt-auto">
                            <div class="d-flex align-items-center text-muted mb-2">
                                <i class="fas fa-calendar me-2"></i>
                                <small>${eventDate.toLocaleDateString()}</small>
                            </div>
                            <div class="d-flex align-items-center text-muted mb-2">
                                <i class="fas fa-map-marker-alt me-2"></i>
                                <small>${event.location}</small>
                            </div>
                            <div class="d-flex align-items-center text-muted">
                                <i class="fas fa-users me-2"></i>
                                <small>${event.registrations?.length || 0} registered</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    
    async function showEventDetails(eventId) {
        try {
            const response = await fetch(`/api/events/${eventId}`);
            const data = await response.json();
            
            if (data.success) {
                const event = data.event;
                const eventDate = new Date(event.date);
                const isUpcoming = eventDate > new Date();
                
                document.getElementById('eventModalLabel').textContent = event.title;
                document.getElementById('eventModalBody').innerHTML = `
                    <div class="row">
                        <div class="col-md-6">
                            <img src="${event.image || '/images/event-placeholder.jpg'}" class="img-fluid rounded mb-3" alt="${event.title}">
                        </div>
                        <div class="col-md-6">
                            <h6 class="fw-bold">Event Details</h6>
                            <p><strong>Date:</strong> ${eventDate.toLocaleDateString()}</p>
                            <p><strong>Time:</strong> ${eventDate.toLocaleTimeString()}</p>
                            <p><strong>Location:</strong> ${event.location}</p>
                            <p><strong>Category:</strong> ${event.category.replace('-', ' ').toUpperCase()}</p>
                            <p><strong>Registered:</strong> ${event.registrations?.length || 0} people</p>
                            ${isUpcoming ? `
                                <button class="btn btn-rotaract" onclick="registerForEvent('${event._id}')">
                                    <i class="fas fa-user-plus me-2"></i>Register
                                </button>
                            ` : ''}
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-12">
                            <h6 class="fw-bold">Description</h6>
                            <p>${event.description}</p>
                        </div>
                    </div>
                `;
                
                new bootstrap.Modal(document.getElementById('eventModal')).show();
            }
        } catch (error) {
            console.error('Error loading event details:', error);
        }
    }
    
    function showNoEventsMessage() {
        document.getElementById('eventsContainer').innerHTML = `
            <div class="col-12 text-center py-5">
                <i class="fas fa-calendar-times fa-4x text-muted mb-4"></i>
                <h4 class="text-muted">No events available</h4>
                <p class="text-muted">Check back later for upcoming events.</p>
            </div>
        `;
    }
});

async function registerForEvent(eventId) {
    try {
        const response = await fetch(`/api/events/${eventId}/register`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        const data = await response.json();
        
        if (data.success) {
            alert('Successfully registered for the event!');
            location.reload();
        } else {
            alert(data.message || 'Registration failed. Please try again.');
        }
    } catch (error) {
        console.error('Error registering for event:', error);
        alert('Registration failed. Please try again.');
    }
}
</script>

<%- include('partials/footer') %>
